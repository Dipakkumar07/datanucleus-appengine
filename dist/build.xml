<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="gae" default="testdist">

  <property name="version.major" value="0"/>
  <property name="version.minor" value="4"/>
  <property name="version" value="${version.major}.${version.minor}"/>
  <property name="orm.source.zip" value="datanucleus-appengine-${version}-src.zip"/>
  <property name="orm.jar" value="datanucleus-appengine-${version}.jar"/>
  <property name="zip.prefix" value="appengine-orm"/>
  <property name="dist.target" value="${zip.prefix}-${version}.zip"/>

  <target name="dist" depends="split" description="Build the datanucleus appengine distribution">
    <zip destfile="${orm.source.zip}">
      <fileset dir="../src" includes="**/*"/>
    </zip>
    <copy file="../datanucleus-appengine-SNAPSHOT.jar" tofile="datanucleus-appengine-${version}.jar"/>
    <zip destfile="${dist.target}">
      <zipfileset prefix="${zip.prefix}" dir="../lib">
        <include name="asm-3.1.jar"/>
        <include name="jdo2-api-2.2.jar"/>
        <include name="transaction-api-1.1.jar"/>
        <include name="persistence-api-1.0.2.jar"/>
        <include name="datanucleus-enhancer*"/>
        <include name="datanucleus-jpa*"/>
        <include name="datanucleus-rdbms-*src*"/>
        <include name="datanucleus-core-*src*"/>
      </zipfileset>
      <zipfileset prefix="${zip.prefix}" dir="../lib/split">
        <include name="*.jar"/>
      </zipfileset>
      <zipfileset prefix="${zip.prefix}" file="${orm.jar}"/>
      <zipfileset prefix="${zip.prefix}" file="${orm.source.zip}"/>
      <zipfileset prefix="${zip.prefix}" file="README"/>
      <zipfileset prefix="${zip.prefix}" dir="..">
        <include name="demos/**"/>
        <include name="doc/**"/>
      </zipfileset>
    </zip>
    <delete dir="../lib/split"/>
    <delete file="${orm.jar}"/>
    <delete file="${orm.source.zip}"/>
  </target>

  <target name="split" description="Split the datanucleus jars into chunks smaller than 1MB.
                                    Typically we would let the appcfg script do this for us,
                                    but because of some special requirements that datanucleus
                                    has we need to do this ourselves.">
    <mkdir dir="../lib/split"/>
    <java dir="../lib" fork="true" classname="com.google.apphosting.tools.JarSplitter" classpath="../lib/JarSplitter_deploy.jar">
      <arg value="--input_jar=datanucleus-core-1.1.0.m1.jar"/>
      <arg value="--output_directory=split"/>
      <arg value="--max_file_size=1000000"/>
      <arg value="--replicate_manifests=true"/>
    </java>
    <java dir="../lib" fork="true" classname="com.google.apphosting.tools.JarSplitter" classpath="../lib/JarSplitter_deploy.jar">
      <arg value="--input_jar=datanucleus-rdbms-1.1.0.m1.jar"/>
      <arg value="--output_directory=split"/>
      <arg value="--max_file_size=1000000"/>
      <arg value="--replicate_manifests=true"/>
    </java>
  </target>

  <property name="orm.tmp.dir" value="/tmp/testdist"/>
  <property name="orm.sdk.tmp.dir" value="${orm.tmp.dir}/lib"/>

  <target name="testdist" depends="dist"
          description="Unzip the dist, launch one of the sample apps, and hit it
                       with curl to make sure it is functioning properly.">
    <!--
      Setup a directory for the test distribution
      It should look like this:
      /tmp/testdist/lib
      /tmp/testdist/lib/appengine-api.jar
      /tmp/testdist/lib/appengine-loca-runtime.jar
      /tmp/testdist/appengine-orm
      /tmp/testdist/appengine-orm/<orm distro>
     -->
    <delete dir="${orm.tmp.dir}"/>
    <mkdir dir="${orm.tmp.dir}"/>

    <!-- Now setup a directory that contains the sdk jars we need to run the demos -->
    <mkdir dir="${orm.sdk.tmp.dir}"/>
    <copy todir="${orm.sdk.tmp.dir}">
      <fileset dir="../lib">
        <include name="appengine-api.jar"/>
        <include name="appengine-local-runtime.jar"/>
      </fileset>
    </copy>

    <unzip src="${dist.target}" dest="${orm.tmp.dir}"/>
    <parallel>
      <daemons>
        <exec executable="ant" dir="${orm.tmp.dir}/${zip.prefix}/demos/helloorm"/>
      </daemons>
      <sequential>
        <sleep seconds="5"/>

        <!-- create a flight -->
        <exec executable="curl" failifexecutionfails="true" failonerror="true">
          <arg value="-d"/>
          <arg value="orig=BOS&amp;dest=LAX"/>
          <arg value="http://localhost:8080/addFlight"/>
        </exec>
        <exec executable="curl" failifexecutionfails="true" failonerror="true" outputproperty="curl.add.result">
          <arg value="http://localhost:8080"/>
        </exec>
        <condition property="expected.add.response">
          <contains string="${curl.add.result}" substring="aghoZWxsb29ybXIMCxIGRkxJR0hUGAEM"/>
        </condition>
        <fail unless="expected.add.response" message="Did not get the expected add response: ${curl.add.result}${line.separator}${line.separator}    BUILD FAILED!!!!"/>

         <!-- issue a jpql query -->
        <exec executable="curl" failifexecutionfails="true" failonerror="true" outputproperty="curl.query.result">
          <arg value="-d"/>
          <arg value="q=select f from com.google.appengine.helloorm.Flight f where orig = 'BOS'"/>
          <arg value="http://localhost:8080"/>
        </exec>
        <condition property="expected.query.response">
          <contains string="${curl.query.result}" substring="aghoZWxsb29ybXIMCxIGRkxJR0hUGAEM"/>
        </condition>
        <fail unless="expected.query.response" message="Did not get the expected query response: ${curl.query.result}${line.separator}${line.separator}    BUILD FAILED!!!!"/>

        <!-- switch to jdo -->
       <exec executable="curl" failifexecutionfails="true" failonerror="true">
         <arg value="-d"/>
         <arg value="persistenceStandard=JDO"/>
         <arg value="http://localhost:8080/updatePersistenceStandard"/>
       </exec>
        <exec executable="curl" failifexecutionfails="true" failonerror="true" outputproperty="curl.switchps.result">
          <arg value="http://localhost:8080"/>
        </exec>
       <condition property="expected.switchps.response">
         <contains string="${curl.switchps.result}" substring="Persistence standard is JDO"/>
       </condition>
       <fail unless="expected.switchps.response" message="Did not get the expected switchps response: ${curl.switchps.result}${line.separator}${line.separator}    BUILD FAILED!!!!"/>
      </sequential>
    </parallel>
  </target>
</project>